services:
  # Main application service
  veo-dashboard:
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    image: localhost/veo-dashboard:latest
    container_name: veo-dashboard-app
    ports:
      - "3000:3000"
    environment:
      # Next.js
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
      - HOSTNAME=0.0.0.0
      
      # Google Cloud settings
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      - GOOGLE_CLOUD_LOCATION=${GOOGLE_CLOUD_LOCATION:-us-central1}
      - GOOGLE_GENAI_USE_VERTEXAI=${GOOGLE_GENAI_USE_VERTEXAI:-true}
      - GOOGLE_CLOUD_OUTPUT_GCS_URI=${GOOGLE_CLOUD_OUTPUT_GCS_URI}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/service-account.json
    volumes:
      # SQLite database persistence
      - ./data:/app/data
      # Google Cloud credentials
      - ./credentials:/app/credentials:ro
      # Video and thumbnail storage (if not using GCS)
      - ./public/videos:/app/public/videos
      - ./public/thumbnails:/app/public/thumbnails
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s
    # depends_on:
    #   - log-aggregator

  # # Log aggregation service (optional)
  # log-aggregator:
  #   image: grafana/loki:2.9.0
  #   container_name: veo-loki
  #   ports:
  #     - "3100:3100"
  #   command: -config.file=/etc/loki/local-config.yaml
  #   volumes:
  #     - loki-data:/loki
  #   restart: unless-stopped

  # # Log visualization (optional)
  # grafana:
  #   image: grafana/grafana:10.1.0
  #   container_name: veo-grafana
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #     - GF_USERS_ALLOW_SIGN_UP=false
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #     - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
  #   restart: unless-stopped
  #   depends_on:
  #     - log-aggregator

  # # Database backup service
  # db-backup:
  #   image: alpine:3.18
  #   container_name: veo-db-backup
  #   volumes:
  #     - ./data:/app/data
  #     - ./backups:/app/backups
  #   command: |
  #     sh -c "
  #       while true; do
  #         timestamp=$$(date +%Y%m%d_%H%M%S)
  #         cp /app/data/veo-meta.sqlite /app/backups/veo-meta_$${timestamp}.sqlite
  #         find /app/backups -name '*.sqlite' -mtime +7 -delete
  #         sleep 86400
  #       done
  #     "
  #   restart: unless-stopped

# volumes:
  # loki-data:
  #   driver: local
  # grafana-data:
  #   driver: local

networks:
  default:
    name: veo-dashboard-network