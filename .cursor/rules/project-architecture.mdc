---
description: 
globs: 
alwaysApply: false
---
# Veo Dashboard Project Architecture

## Project Overview
This is a Next.js 15.3.3 application that enables Korean-language video generation using Google's AI services. The workflow: Korean prompt → Gemini translation → Veo video generation → Display results.

## Key Architectural Patterns

### Service Layer Pattern
- AI services are abstracted in [src/lib/ai.ts](mdc:src/lib/ai.ts)
- `TranslationService` handles Gemini integration
- `VideoGenerationService` handles Veo integration  
- Services include comprehensive logging and error handling

### Custom Hook Pattern
- State management centralized in [src/hooks/use-video-generation.ts](mdc:src/hooks/use-video-generation.ts)
- Handles the complete workflow: translation → video generation
- Provides clean API: `{ results, isLoading, error, generateVideo, clearResults }`

### Component Composition
- Main dashboard: [src/components/video-dashboard.tsx](mdc:src/components/video-dashboard.tsx)
- Form component: [src/components/video-prompt-form.tsx](mdc:src/components/video-prompt-form.tsx)  
- Result display: [src/components/video-result-card.tsx](mdc:src/components/video-result-card.tsx)
- All components use TypeScript interfaces from [src/types/index.ts](mdc:src/types/index.ts)

### API Design Pattern
- RESTful endpoints in [src/app/api/](mdc:src/app/api)
- Consistent error handling and logging across all routes
- Detailed request/response logging with execution time tracking

## Technology Stack
- **Framework**: Next.js 15.3.3 with App Router
- **UI**: shadcn/ui + Tailwind CSS
- **AI Services**: Google Gemini (translation) + Google Veo (video generation)
- **Type Safety**: TypeScript with comprehensive interfaces
- **Logging**: Custom logger utility in [src/lib/logger.ts](mdc:src/lib/logger.ts)
