---
description:
globs:
alwaysApply: false
---
# Logging System Guidelines

## Logger Utility
The project uses a centralized logging system via [src/lib/logger.ts](mdc:src/lib/logger.ts).

## Logging Levels
- `Logger.info()` - General information, API success
- `Logger.warn()` - Warning conditions, missing parameters
- `Logger.error()` - Error conditions, API failures
- `Logger.debug()` - Development-only detailed information
- `Logger.step()` - Process step tracking

## API Logging Pattern
All API routes follow this pattern:
```typescript
const startTime = Date.now();
const route = '/api/example';

Logger.apiStart(route, requestData);
// ... processing ...
Logger.apiSuccess(route, Date.now() - startTime, responseData);
// or
Logger.apiError(route, Date.now() - startTime, error);
```

## Service Logging Pattern  
AI services in [src/lib/ai.ts](mdc:src/lib/ai.ts) use detailed step logging:
```typescript
Logger.step("Service - Starting operation", { details });
Logger.step("Service - Operation completed", { results });
Logger.error("Service - Operation failed", { error });
```

## Client-Side Logging
The custom hook [src/hooks/use-video-generation.ts](mdc:src/hooks/use-video-generation.ts) logs the complete workflow:
- Workflow start/completion
- Each step (translation, video generation)
- API call success/failure
- Request IDs for tracking

## Log Format
All logs include:
- ISO timestamp
- Log level
- Structured context (JSON)
- Request IDs for tracing
- Execution duration for performance monitoring

## Development vs Production
- Debug logs only appear in development
- All logs include structured data for easy parsing
- Error logs include stack traces when available
